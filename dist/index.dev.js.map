{"version":3,"file":"index.dev.js","sources":["../src/util.ts","../src/three.ts"],"sourcesContent":["/**\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MathUtils, Vector3 } from \"three\";\n\nexport const EARTH_RADIUS = 6371010;\nexport const WORLD_SIZE = Math.PI * EARTH_RADIUS;\n\nfunction toLatLngLiteral(\n  latLng: google.maps.LatLngLiteral | google.maps.LatLng\n): google.maps.LatLngLiteral {\n  if (window.google && google.maps && latLng instanceof google.maps.LatLng) {\n    return latLng.toJSON();\n  }\n  return latLng as google.maps.LatLngLiteral;\n}\n\n/**\n * Converts latitude and longitude to meters.\n */\nexport function latLngToMeters(\n  latLng: google.maps.LatLngLiteral | google.maps.LatLng\n): {\n  x: number;\n  y: number;\n} {\n  latLng = toLatLngLiteral(latLng);\n\n  const x = EARTH_RADIUS * MathUtils.degToRad(latLng.lng);\n  const y =\n    0 -\n    EARTH_RADIUS *\n      Math.log(\n        Math.tan(0.5 * (Math.PI * 0.5 - MathUtils.degToRad(latLng.lat)))\n      );\n  return { x, y };\n}\n\n/**\n * Converts latitude and longitude to world space coordinates with y up.\n */\nexport function latLngToVector3(\n  point: google.maps.LatLngLiteral | google.maps.LatLng,\n  target = new Vector3()\n) {\n  const { x, y } = latLngToMeters(point);\n\n  return target.set(x, 0, -y);\n}\n\n/**\n * Converts latitude and longitude to world space coordinates relative\n * to a reference location with y up.\n */\nexport function latLngToVector3Relative(\n  point: google.maps.LatLngLiteral | google.maps.LatLng,\n  reference: google.maps.LatLngLiteral | google.maps.LatLng,\n  target = new Vector3()\n) {\n  const p = latLngToVector3(point);\n  const r = latLngToVector3(reference);\n\n  target.setX((r.x - p.x) * Math.sign(p.x - r.x));\n  target.setY((r.y - p.y) * Math.sign(p.y - r.y));\n  target.setZ((r.z - p.z) * Math.sign(p.z - r.z));\n\n  return target;\n}\n","/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PCFSoftShadowMap,\n  PerspectiveCamera,\n  Scene,\n  WebGLRenderer,\n  sRGBEncoding,\n} from \"three\";\n\nexport interface LatLngAltitudeLiteral extends google.maps.LatLngLiteral {\n  altitude: number;\n}\n\nexport interface ThreeJSOverlayViewOptions {\n  /** The anchor for the scene. Defaults to {lat: 0, lng: 0, altitude: 0}. */\n  anchor?: LatLngAltitudeLiteral;\n  /** The rotations applied in the camera transformation matrix. Defaults to [0, 0, 0]. */\n  rotation?: Float32Array;\n  /** The scale applied in the camera transformation matrix. Defaults to [1, 1, 1].*/\n  scale?: Float32Array;\n  /** The map can be set at initialization or by calling `setMap(map)`. */\n  map?: google.maps.Map;\n  /** The scene can be provided. Defaults to `new Scene()`. */\n  scene?: Scene;\n}\n\n/**\n * Add a [three.js](https://threejs.org) scene as a [Google Maps WebglOverlayView](http://goo.gle/webgloverlayview-ref).\n *\n * **Note**: The scene will be rotated to a default up axis of (0, 1, 0) matching that of three.js.\n * *\n */\nexport class ThreeJSOverlayView implements google.maps.WebglOverlayView {\n  /**\n   * See [[ThreeJSOverlayViewOptions.anchor]]\n   */\n  readonly anchor: LatLngAltitudeLiteral;\n  /**\n   * See [[ThreeJSOverlayViewOptions.scene]]\n   */\n  readonly scene: Scene;\n\n  private camera: PerspectiveCamera;\n  private renderer: WebGLRenderer;\n  private scale: Float32Array;\n  private rotation: Float32Array;\n  private overlay: google.maps.WebglOverlayView;\n\n  constructor({\n    anchor = { lat: 0, lng: 0, altitude: 0 },\n    rotation = new Float32Array([0, 0, 0]),\n    scale = new Float32Array([1, 1, 1]),\n    scene = new Scene(),\n    map,\n  }: ThreeJSOverlayViewOptions) {\n    this.overlay = new google.maps.WebglOverlayView();\n    this.renderer = null;\n    this.camera = null;\n    this.anchor = anchor;\n    this.rotation = rotation;\n    this.scale = scale;\n    this.scene = scene;\n\n    // rotate scene consistent with y up in THREE\n    this.scene.rotation.x = Math.PI / 2;\n\n    this.overlay.onAdd = this.onAdd.bind(this);\n    this.overlay.onRemove = this.onRemove.bind(this);\n    this.overlay.onContextLost = this.onContextLost.bind(this);\n    this.overlay.onContextRestored = this.onContextRestored.bind(this);\n    this.overlay.onDraw = this.onDraw.bind(this);\n\n    this.camera = new PerspectiveCamera();\n\n    if (map) {\n      this.setMap(map);\n    }\n  }\n\n  onAdd(): void {}\n\n  onRemove(): void {}\n\n  getMap(): google.maps.Map {\n    return this.overlay.getMap();\n  }\n\n  requestRedraw(): void {\n    this.overlay.requestRedraw();\n  }\n\n  setMap(map: google.maps.Map): void {\n    this.overlay.setMap(map);\n  }\n\n  addListener(\n    eventName: string,\n    handler: Function\n  ): google.maps.MapsEventListener {\n    return this.overlay.addListener(eventName, handler);\n  }\n\n  bindTo(\n    key: string,\n    target: google.maps.MVCObject,\n    targetKey?: string,\n    noNotify?: boolean\n  ): void {\n    this.overlay.bindTo(key, target, targetKey, noNotify);\n  }\n\n  get(key: string) {\n    return this.overlay.get(key);\n  }\n\n  notify(key: string): void {\n    this.overlay.notify(key);\n  }\n\n  set(key: string, value: any): void {\n    this.overlay.set(key, value);\n  }\n\n  setValues(values?: object): void {\n    this.overlay.setValues(values);\n  }\n\n  unbind(key: string): void {\n    this.overlay.unbind(key);\n  }\n\n  unbindAll(): void {\n    this.overlay.unbindAll();\n  }\n\n  onContextRestored(gl: WebGLRenderingContext) {\n    this.renderer = new WebGLRenderer({\n      canvas: gl.canvas,\n      context: gl,\n      ...gl.getContextAttributes(),\n    });\n    this.renderer.autoClear = false;\n    this.renderer.autoClearDepth = false;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.type = PCFSoftShadowMap;\n\n    // LinearEncoding is default for historical reasons\n    // https://discourse.threejs.org/t/linearencoding-vs-srgbencoding/23243\n    this.renderer.outputEncoding = sRGBEncoding;\n\n    const { width, height, clientWidth } = gl.canvas as HTMLCanvasElement;\n\n    this.renderer.setPixelRatio(width / clientWidth);\n    this.renderer.setSize(width, height, false);\n  }\n\n  onContextLost() {}\n\n  onDraw(\n    gl: WebGLRenderingContext,\n    transformer: google.maps.CoordinateTransformer\n  ): void {\n    const { lat, lng, altitude } = this.anchor;\n\n    this.camera.projectionMatrix.fromArray(\n      transformer.fromLatLngAltitude(\n        { lat, lng },\n        altitude,\n        this.rotation,\n        this.scale\n      )\n    );\n\n    gl.disable(gl.SCISSOR_TEST);\n\n    this.requestRedraw();\n    this.renderer.render(this.scene, this.camera);\n\n    // reset state using renderer.resetState() and not renderer.state.reset()\n    this.renderer.resetState();\n  }\n}\n"],"names":["EARTH_RADIUS","WORLD_SIZE","Math","PI","latLngToMeters","latLng","window","google","maps","LatLng","toJSON","toLatLngLiteral","x","MathUtils","degToRad","lng","y","log","tan","lat","latLngToVector3","point","target","Vector3","set","constructor","anchor","altitude","rotation","Float32Array","scale","scene","Scene","map","overlay","WebglOverlayView","renderer","camera","onAdd","this","bind","onRemove","onContextLost","onContextRestored","onDraw","PerspectiveCamera","setMap","getMap","requestRedraw","addListener","eventName","handler","bindTo","key","targetKey","noNotify","get","notify","value","setValues","values","unbind","unbindAll","gl","WebGLRenderer","canvas","context","getContextAttributes","autoClear","autoClearDepth","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","width","height","clientWidth","setPixelRatio","setSize","transformer","projectionMatrix","fromArray","fromLatLngAltitude","disable","SCISSOR_TEST","render","resetState","reference","p","r","setX","sign","setY","setZ","z"],"mappings":"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"}